// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>


namespace Microservices.Demo.Policy.API.Infrastructure.Data.Context
{
    using Microservices.Demo.Policy.API.Infrastructure.Data.Entities;
    using System;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata;
    public partial class PolicyDbContext : DbContext
    {
        public PolicyDbContext()
        {
        }

        public PolicyDbContext(DbContextOptions<PolicyDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Offer> Offers { get; set; }
        public virtual DbSet<OfferCover> OfferCovers { get; set; }
        public virtual DbSet<OfferStatus> OfferStatuses { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<PolicyCover> PolicyCovers { get; set; }
        public virtual DbSet<PolicyHolder> PolicyHolders { get; set; }
        public virtual DbSet<PolicyStatus> PolicyStatuses { get; set; }
        public virtual DbSet<PolicyValidityPeriod> PolicyValidityPeriods { get; set; }
        public virtual DbSet<PolicyVersion> PolicyVersions { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address");

                entity.Property(e => e.City)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Street)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("Message");

                entity.Property(e => e.Type)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Offer>(entity =>
            {
                entity.ToTable("Offer");

                entity.Property(e => e.AgentLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Number)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.OfferStatus)
                    .WithMany(p => p.Offers)
                    .HasForeignKey(d => d.OfferStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferOfferStatus");

                entity.HasOne(d => d.PolicyHolder)
                    .WithMany(p => p.Offers)
                    .HasForeignKey(d => d.PolicyHolderId)
                    .HasConstraintName("FK_OfferPolicyHolder");

                entity.HasOne(d => d.PolicyValidityPeriod)
                    .WithMany(p => p.Offers)
                    .HasForeignKey(d => d.PolicyValidityPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferPolicyValidityPeriod");
            });

            modelBuilder.Entity<OfferCover>(entity =>
            {
                entity.ToTable("OfferCover");

                entity.Property(e => e.Code)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Offer)
                    .WithMany(p => p.OfferCovers)
                    .HasForeignKey(d => d.OfferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferCoverOffer");
            });

            modelBuilder.Entity<OfferStatus>(entity =>
            {
                entity.ToTable("OfferStatus");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Policy>(entity =>
            {
                entity.ToTable("Policy");

                entity.Property(e => e.AgentLogin)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Number)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.PolicyStatus)
                    .WithMany(p => p.Policies)
                    .HasForeignKey(d => d.PolicyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyPolicyStatus");
            });

            modelBuilder.Entity<PolicyCover>(entity =>
            {
                entity.ToTable("PolicyCover");

                entity.Property(e => e.Code)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Premium).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.PolicyValidityPeriod)
                    .WithMany(p => p.PolicyCovers)
                    .HasForeignKey(d => d.PolicyValidityPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyCoverPolicyValidityPeriod");

                entity.HasOne(d => d.PolicyVersion)
                    .WithMany(p => p.PolicyCovers)
                    .HasForeignKey(d => d.PolicyVersionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyCoverPolicyVersion");
            });

            modelBuilder.Entity<PolicyHolder>(entity =>
            {
                entity.ToTable("PolicyHolder");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pesel)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.PolicyHolders)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyHolderAddress");
            });

            modelBuilder.Entity<PolicyStatus>(entity =>
            {
                entity.ToTable("PolicyStatus");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PolicyValidityPeriod>(entity =>
            {
                entity.ToTable("PolicyValidityPeriod");
            });

            modelBuilder.Entity<PolicyVersion>(entity =>
            {
                entity.ToTable("PolicyVersion");

                entity.Property(e => e.TotalPremiumAmount).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.CoverPeriodPolicyValidityPeriod)
                    .WithMany(p => p.PolicyVersionCoverPeriodPolicyValidityPeriods)
                    .HasForeignKey(d => d.CoverPeriodPolicyValidityPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyVersionCoverPeriodPolicyValidityPeriod");

                entity.HasOne(d => d.PolicyHolder)
                    .WithMany(p => p.PolicyVersions)
                    .HasForeignKey(d => d.PolicyHolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyVersionPolicyHolder");

                entity.HasOne(d => d.Policy)
                    .WithMany(p => p.PolicyVersions)
                    .HasForeignKey(d => d.PolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyVersionPolicy");

                entity.HasOne(d => d.VersionValidityPeriodPolicyValidityPeriod)
                    .WithMany(p => p.PolicyVersionVersionValidityPeriodPolicyValidityPeriods)
                    .HasForeignKey(d => d.VersionValidityPeriodPolicyValidityPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PolicyVersionVersionValidityPeriodPolicyValidityPeriod");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}